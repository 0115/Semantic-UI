---
layout      : 'default'
css         : 'api'

title       : 'API'
description : 'API allows UI elements to send events to the server'
type        : 'UI Behavior'
---

<script src="/javascript/library/sinon.js"></script>
<script src="/javascript/api.js"></script>

<%- @partial('header', { tabs: 'behavior' }) %>

<div class="main container">
  <div class="ui active tab" data-tab="overview">

    <p>Semantic API helps attach server events to UI elements. There a few key features which make API more useful then jQuery AJAX or and simpler than MVC patterns.</p>

    <h3 class="ui header">Why use API?</h3>
    <div class="ui relaxed list">
      <div class="item">
        <i class="check icon"></i>
        <div class="content">
          <div class="header">Designed for UI Feedback</div>
          <p>API is built specifically to interact with UI state, allowing interesting features like setting a minimum perceived request time to set allow for loading animations to not just flash on and off</p>
        </div>
      </div>
      <div class="item">
        <i class="check icon"></i>
        <div class="content">
          <div class="header">Organize your Endpoints, Know your API</div>
          <p>Using API makes sure you manage your endpoints in one location, which means you have a complete list of all API endpoints in one location to know the full breadth of your API, and you can update endpoints from a single file.</p>
        </div>
      </div>
      <div class="item">
        <i class="check icon"></i>
        <div class="content">
          <div class="header">URL Templating for REST</div>
          <p>API allows your API endpoints to be stored with url variables that are replaced at run-time. This means you dont need to manually update urls to match the data used for an endpoint.</p>
        </div>
      </div>
      <div class="item">
        <i class="check icon"></i>
        <div class="content">
          <div class="header">Performance tools built in</div>
          <p>API is built with the same trace and performance tools as other Semantic components allowing you to track the execution time and look at API traces in the console to help debug issues quicker.</p>
        </div>
      </div>
    </div>

  </div>

  <div class="ui tab" data-tab="usage">
    <div class="fixed column">
      <div class="content">
        <div class="ui teal follow button" data-id="5209">
          Follow
        </div>
      </div>
    </div>
    <div class="examples">

      <h3 class="ui header">1. Define Your API</h3>
      <p><b>API</b> works best when using a named list of endpoints. This means you can maintain all of your website's API endpoints in a single location, without having to update them across the site.</p>
      <p>To do this you must include a list of named endpoints before calling <code>$.api</code> on any page. The easiest way to do this is to have it available in a stand-alone configuration file</p>
      <div class="evaluated code">
        /* Define API */
        var api = {
          'get user'          : '/api/user/{$id}',
          'update user'       : '/api/user/save/{$id}',
          'follow user'       : '/api/follow/{$id}',
          'change preference' : '/api/preference/{name}/{$value}'
        };
        $.fn.api.settings.api = api;
      </div>
      <div class="code" data-type="html">
        <!-- Include on any page using api !-->
        <script src="/config.js"></script>
      </div>

      <h3 class="ui header">2. Attach an API event to an element</h3>

      <p>Any element can have an API action attached, by default the action will occur on the most relevant event for the type of element. For example a button will use on <code>click</code> or an input <code>oninputchange</code></p>

      <div class="evaluated code">
      $('.follow.button')
        .api({
          action: 'follow user',
          complete: function() {
            alert('Tada');
          }
        })
      ;
      </div>

      <h3 class="ui header">2. Specify state changes to text or appearance (optional)</h3>
      <p>API couples well with <a href="#">ui state</a>, a component used for managing text state and class names of elements.</p>
      <p>State will automatically apply the class <code>active</code> on API success, and update any text nodes with new values specified. This example updates the text of a follow button to "following" when the API action is successful, after flashing the text success.</p>
      <div class="evaluated code">
      $('.follow.button')
        .state({
          text: {
            inactive : 'Follow',
            active   : 'Following',
            flash    : 'Success'
          }
        })
      ;
      </div>

      <h3 class="ui header">4. Make sure metadata is set for an element before event occurs</h3>

      <p>When an API action occurs, templated url data is replaced with data you specify to be sent to the server.</p>
      <div class="code" data-type="html">
        <div class="ui follow button" data-id="5209"></div>
      </div>
      <div class="ui horizontal divider">Or</div>
      <p>Alternatively you can modify the data before sending to server</p>
      <div class="code">
      $('.follow.button')
        .api('setting', 'beforeSend', function(settings) {
          settings.urlData.id = 5209;
          return settings;
        })
      ;
      </div>
    </div>

  </div>

  <div class="ui tab" data-tab="examples">

    <div class="no example">
      <h4 class="ui header">Overlay</h4>
      <p>A api can overlay page content instead of pushing it to the side</p>
      <div class="code" data-demo="true">
      $('.overlay.api')
        .api({
          overlay: true
        })
        .api('toggle')
      ;
      </div>
    </div>

  </div>

  <div class="ui tab" data-tab="settings">

    <h3 class="ui header">
      API Settings
      <div class="sub header">Form settings modify the api behavior</div>
    </h3>
    <table class="ui celled sortable definition table segment">
      <thead>
        <th>Setting</th>
        <th class="four wide">Default</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>overlay</td>
          <td>false</td>
          <td>Whether api should overlay page instead of pushing page to the side</td>
        </tr>
        <tr>
          <td>exclusive</td>
          <td>true</td>
          <td>Whether multiple apis can be open at once</td>
        </tr>
        <tr>
          <td>useCSS</td>
          <td>true</td>
          <td>Whether to use css animations or fallback javascript animations</td>
        </tr>
        <tr>
          <td>duration</td>
          <td>300</td>
          <td>Duration of side bar transition animation</td>
        </tr>
      </tbody>
    </table>

    <div class="ui horizontal section icon divider"><i class="icon setting"></i></div>
    <h4 class="ui header">Callbacks</h4>
    <p>Callbacks specify a function to occur after a specific behavior.</p>

    <table class="ui celled sortable definition table segment">
      <thead>
        <th class="four wide">Setting</th>
        <th>Context</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>onShow</td>
          <td>API</td>
          <td>Is called when a api is shown.</td>
        </tr>
        <tr>
          <td>onHide</td>
          <td>API</td>
          <td>Is called when a api is hidden.</td>
        </tr>
        <tr>
          <td>onChange</td>
          <td>API</td>
          <td>Is called after a api changes visibility</td>
        </tr>
      </tbody>
    </table>

    <div class="ui horizontal divider"><i class="icon setting"></i></div>

    <h3 class="ui header">
      DOM Settings
      <div class="sub header">DOM settings specify how this module should interface with the DOM</div>
    </h3>
    <table class="ui celled definition table segment">
      <thead>
        <th>Setting</th>
        <th class="six wide">Default</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>namespace</td>
          <td>api</td>
          <td>Event namespace. Makes sure module teardown does not effect other events attached to an element.</td>
        </tr>
        <tr>
          <td>className</td>
          <td>
            <div class="code">
      className: {
        active : 'active',
        pushed : 'pushed',
        top    : 'top',
        left   : 'left',
        right  : 'right',
        bottom : 'bottom'
      }
            </div>
          </td>
          <td>Class names used to attach style to state</td>
        </tr>
      </tbody>
    </table>

    <div class="ui horizontal divider"><i class="icon setting"></i></div>

    <h3 class="ui header">
      Debug Settings
      <div class="sub header">Debug settings controls debug output to the console</div>
    </h3>

    <table class="ui celled sortable definition table segment">
      <thead>
        <th>Setting</th>
        <th class="four wide">Default</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>name</td>
          <td>API</td>
          <td>Name used in debug logs</td>
        </tr>
        <tr>
          <td>debug</td>
          <td>True</td>
          <td>Provides standard debug output to console</td>
        </tr>
        <tr>
          <td>performance</td>
          <td>True</td>
          <td>Provides standard debug output to console</td>
        </tr>
        <tr>
          <td>verbose</td>
          <td>True</td>
          <td>Provides ancillary debug output to console</td>
        </tr>
        <tr>
          <td>errors</td>
          <td colspan="2">
            <div class="code">
      error   : {
        method   : 'The method you called is not defined.',
        notFound : 'There were no elements that matched the specified selector'
      }
            </div>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

</div>
</body>
</html>